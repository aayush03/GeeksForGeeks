package graphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author Aayush Srivastava
 */
public class DeliveryManagementSystem {

    public static void main(String[] args) {
        int cityNodes = 4;
        List<Integer> cityFrom = Arrays.asList(new Integer[]{1, 2, 2});
        List<Integer> cityTo = Arrays.asList(new Integer[]{2, 3, 4});
        int company = 1;

        /*System.out.println(order(cityNodes, cityFrom, cityTo, company));


        cityNodes = 5;
        cityFrom = Arrays.asList(new Integer[]{1, 1, 2, 3, 1});
        cityTo = Arrays.asList(new Integer[]{2, 3, 4, 5, 5});
        company = 1;

        System.out.println(order(cityNodes, cityFrom, cityTo, company));

        cityNodes = 3;
        cityFrom = Arrays.asList(new Integer[]{1});
        cityTo = Arrays.asList(new Integer[]{2});
        company = 2;

        System.out.println(order(cityNodes, cityFrom, cityTo, company));*/




        cityNodes = 100;
        cityFrom = Arrays.asList(new Integer[]{22, 20, 25, 39, 11, 32, 63, 9, 33, 23, 30, 29, 17, 41, 38, 3, 67, 30, 31, 20, 7, 42, 6, 44, 7, 33, 46, 62, 59, 51, 58, 19, 22, 5, 70, 75, 6, 95, 34, 22, 11, 35, 9, 51, 11, 35, 75, 12, 54, 9, 39, 44, 5, 33, 46, 14, 69, 57, 39, 4, 90, 32, 20, 72, 34, 15, 29, 12, 16, 72, 30, 4, 17, 14, 31, 9, 4, 17, 18, 42, 5, 51, 49, 21, 66, 50, 27, 69, 8, 43, 24, 71, 11, 60, 25, 47, 21, 80, 93, 52, 3, 9, 24, 34, 7, 32, 33, 26, 16, 38, 3, 4, 10, 20, 55, 29, 59, 65, 27, 46, 56, 44, 46, 5, 60, 23, 21, 34, 20, 59, 24, 6, 54, 28, 50, 8, 63, 35, 10, 34, 7, 31, 40, 29, 42, 5, 12, 61, 43, 67, 30, 12, 42, 48, 45, 15, 7, 47, 81, 25, 8, 55, 94, 56, 46, 20, 62, 4, 60, 58, 51, 44, 24, 52, 17, 7, 79, 64, 75, 4, 15, 65, 42, 11, 59, 22, 24, 14, 1, 15, 4, 87, 40, 71, 59, 10, 32, 48, 29, 12, 33, 25, 2, 7, 13, 29, 40, 12, 1, 7, 13, 20, 27, 55, 61, 29, 11, 7, 68, 69, 57, 64, 56, 38, 3, 69, 34, 43, 14, 62, 25, 6, 30, 2, 31, 48, 27, 26, 23, 53, 4, 10, 49, 7, 37, 74, 22, 53, 67, 56, 19, 29, 55, 10, 58, 21, 65, 11, 18, 51, 25, 21, 86, 84, 22, 5, 82, 8, 61, 63, 11, 76, 9, 52, 7, 37, 74, 40, 12, 4, 43, 30, 31, 92, 69, 16, 2, 33, 14, 1, 25, 45, 2, 91, 23, 46, 8, 64, 1, 47, 21, 8, 45, 61, 3, 9, 19, 38, 1, 50, 37, 9, 6, 40, 66, 30, 19, 32, 3, 25, 58, 52, 85, 41, 59, 57, 11, 22, 56, 61, 12, 16, 10, 15, 13, 36, 49, 27, 42, 5, 10, 25, 39, 16, 13, 70, 3, 18, 1, 47, 86, 37, 17, 14, 53, 33, 28, 34, 35, 70, 72, 1, 7, 13, 14, 6, 53, 43, 17, 64, 48, 73, 21, 24, 14, 60, 26, 32, 20, 3, 59, 60, 4, 2, 8, 48, 76, 4, 60, 49, 81, 78, 11, 2, 3, 15, 19, 76, 42, 5, 69, 17, 56, 78, 39, 24, 57, 58, 45, 80, 2, 18, 32, 9, 23, 36, 87, 15, 38, 63, 36, 17, 18, 71, 40, 3, 84, 31, 37, 51, 24, 5, 49, 22, 23, 45, 28, 43, 85, 48, 20, 71, 27, 28, 14, 11, 39, 34, 13, 11, 27, 23, 41, 31, 12, 9, 42, 5, 4, 10, 52, 64, 33, 14, 53, 15, 19, 34, 25, 3, 50, 11, 12, 81, 82, 31, 48, 35, 27, 24, 40, 34, 11, 42, 96, 24, 3, 30, 52, 33, 55, 6, 45, 16, 22, 14, 47, 57, 52, 22, 3, 60, 75, 2, 7, 55, 61, 38, 30, 50, 1, 52, 8, 65, 5, 16, 49, 31, 37, 18, 42, 2, 2, 49, 22, 28, 87, 5, 69, 65, 44, 3, 59, 60, 23, 21, 11, 8, 32, 97, 24, 52, 39, 4, 1, 13, 33, 75, 72, 54, 51, 49, 65, 55, 40, 3, 66, 21, 22, 19, 11, 44, 41, 42, 46, 60, 57, 13, 43, 70, 24, 70, 73, 27, 1, 28, 53, 11, 3, 13, 32, 48, 38, 31, 20, 18, 5, 64, 13, 37, 46, 22, 32, 46, 23, 21, 5, 14, 20, 25, 30, 28, 24, 72, 30, 10, 41, 29, 62, 42, 75, 40, 73, 64, 13, 57, 42, 6, 45, 1, 16, 10, 2, 44, 18, 14, 23, 38, 5, 46, 70, 25, 6, 28, 1, 15, 32, 11, 12, 33, 23, 6, 73, 4, 8, 50, 78, 11, 9, 40, 10, 49, 30, 60, 28, 20, 36, 51, 39, 17, 44, 83, 46, 47, 1, 23, 67, 14, 39, 25, 70, 21, 19, 93, 26, 48, 38, 30, 36, 52, 79, 27, 9, 6, 12, 57, 49, 7, 65, 42, 40, 8, 11, 41, 42, 47, 68, 69, 16, 27, 21, 89, 17, 27, 6, 7, 6, 19, 3, 24, 23, 81, 2, 29, 37, 29, 9, 51, 23, 6, 17, 11, 53, 67, 39, 40, 29, 76, 5, 45, 13, 36, 20, 10, 25, 19, 43, 98, 20, 62, 27, 72, 40, 34, 37, 35, 71, 38, 4, 17, 78, 18, 25, 12, 8, 72, 47, 45, 16, 20, 21, 56, 29, 59, 15, 2, 91, 15, 57, 58, 21, 50, 49, 63, 22, 82, 9, 31, 6, 30, 45, 2, 50, 31, 9, 5, 31, 22, 31, 79, 50, 42, 1, 25, 2, 29, 3, 10, 57, 47, 15, 37, 15, 27, 23, 6, 14, 4, 10, 52, 15, 63, 36, 74, 72, 12, 10, 41, 11, 5, 38, 52, 8, 22, 38, 94, 57, 18, 1, 66, 34, 79, 53, 89, 23, 27, 86, 19});
        cityTo = Arrays.asList(new Integer[]{57, 25, 93, 70, 79, 44, 84, 62, 41, 26, 51, 50, 46, 57, 40, 86, 74, 66, 80, 75, 68, 88, 98, 86, 98, 95, 75, 97, 97, 60, 65, 39, 48, 24, 94, 97, 23, 98, 79, 42, 83, 46, 39, 83, 41, 52, 93, 50, 73, 83, 42, 77, 82, 80, 82, 81, 83, 90, 92, 12, 91, 68, 47, 100, 70, 88, 62, 90, 29, 74, 61, 48, 24, 58, 56, 50, 94, 50, 57, 74, 70, 100, 52, 99, 79, 51, 31, 92, 69, 80, 40, 90, 87, 93, 37, 62, 55, 98, 96, 92, 60, 81, 87, 59, 34, 42, 66, 85, 42, 93, 77, 69, 48, 96, 85, 96, 84, 75, 66, 92, 70, 89, 70, 6, 84, 64, 48, 88, 27, 64, 94, 18, 56, 43, 58, 33, 78, 43, 59, 44, 49, 52, 77, 68, 60, 72, 53, 86, 49, 76, 64, 82, 70, 61, 59, 93, 92, 69, 100, 55, 89, 100, 96, 60, 51, 34, 73, 56, 73, 62, 80, 97, 75, 77, 66, 29, 87, 70, 95, 81, 97, 69, 65, 20, 82, 94, 61, 48, 13, 53, 14, 98, 56, 95, 94, 90, 60, 70, 60, 84, 57, 68, 94, 39, 80, 86, 50, 43, 74, 61, 36, 91, 96, 94, 88, 74, 28, 82, 76, 90, 97, 100, 65, 95, 24, 100, 95, 89, 71, 93, 77, 25, 42, 89, 35, 83, 93, 61, 93, 89, 71, 62, 73, 58, 38, 83, 25, 67, 73, 98, 86, 99, 77, 98, 88, 84, 99, 98, 91, 59, 44, 62, 100, 92, 61, 26, 97, 35, 63, 72, 94, 96, 95, 64, 51, 47, 90, 70, 55, 84, 51, 70, 92, 94, 76, 72, 23, 83, 47, 10, 53, 74, 49, 96, 36, 49, 64, 95, 44, 52, 33, 42, 69, 65, 50, 43, 46, 77, 93, 75, 40, 13, 71, 83, 89, 83, 74, 98, 15, 62, 84, 65, 92, 99, 80, 64, 24, 33, 64, 90, 86, 17, 43, 17, 41, 58, 86, 98, 54, 66, 31, 29, 67, 92, 28, 76, 26, 94, 62, 58, 99, 73, 59, 69, 54, 48, 40, 55, 38, 74, 91, 65, 52, 33, 30, 75, 65, 60, 65, 71, 58, 87, 82, 51, 42, 80, 41, 76, 39, 41, 68, 78, 34, 46, 37, 76, 98, 72, 61, 64, 97, 88, 54, 38, 92, 100, 97, 86, 66, 94, 74, 92, 81, 100, 65, 58, 91, 75, 72, 84, 15, 83, 67, 71, 51, 73, 95, 89, 64, 94, 87, 25, 30, 86, 79, 69, 100, 71, 48, 52, 27, 71, 53, 53, 82, 65, 31, 81, 90, 100, 53, 91, 50, 53, 64, 78, 72, 58, 76, 36, 78, 28, 55, 76, 77, 30, 52, 64, 98, 29, 100, 66, 99, 63, 96, 62, 59, 97, 47, 53, 97, 71, 79, 92, 98, 47, 87, 40, 71, 67, 61, 47, 51, 63, 97, 91, 89, 67, 72, 100, 73, 99, 60, 85, 70, 40, 92, 80, 56, 49, 43, 72, 96, 63, 17, 59, 68, 78, 59, 87, 88, 76, 13, 85, 18, 61, 88, 88, 88, 63, 64, 90, 42, 98, 89, 100, 91, 75, 82, 90, 100, 16, 95, 71, 77, 45, 68, 46, 59, 99, 81, 97, 77, 49, 81, 81, 67, 85, 81, 65, 65, 81, 95, 95, 87, 34, 85, 98, 80, 78, 29, 69, 93, 85, 90, 96, 98, 31, 83, 100, 41, 73, 99, 52, 57, 96, 61, 64, 63, 100, 40, 82, 82, 78, 97, 49, 78, 68, 62, 51, 93, 77, 36, 71, 67, 63, 33, 73, 36, 87, 44, 36, 69, 95, 54, 56, 44, 67, 81, 61, 89, 69, 90, 91, 55, 61, 71, 97, 58, 17, 87, 23, 22, 81, 55, 46, 73, 99, 60, 48, 93, 88, 10, 35, 47, 92, 38, 84, 94, 39, 44, 44, 88, 52, 15, 74, 92, 42, 14, 76, 13, 94, 72, 63, 72, 93, 66, 96, 61, 19, 72, 95, 81, 77, 12, 81, 96, 91, 56, 33, 82, 43, 23, 100, 38, 71, 71, 32, 83, 85, 95, 77, 18, 57, 36, 76, 87, 60, 93, 73, 89, 98, 31, 67, 83, 74, 77, 89, 91, 49, 74, 99, 32, 54, 13, 25, 63, 79, 25, 90, 34, 95, 86, 64, 65, 46, 56, 69, 24, 48, 40, 62, 66, 72, 51, 72, 98, 94, 86, 63, 22, 37, 56, 77, 51, 37, 96, 99, 38, 69, 37, 77, 91, 49, 55, 44, 83, 75, 10, 33, 91, 38, 97, 48, 16, 96, 88, 56, 73, 26, 92, 80, 85, 100, 41, 14, 99, 28, 67, 97, 32, 80, 96, 87, 47, 84, 42, 100, 34, 63, 96, 66, 72, 62, 94, 28, 68, 93, 67, 100, 53, 86, 2, 61, 9, 31, 20, 89, 71, 60, 84, 79, 40, 41, 39, 37, 32, 61, 40, 87, 77, 71, 81, 77, 85, 38, 50, 48, 59, 65, 49, 61, 100, 84, 76, 95, 69, 69, 27, 75, 96, 93, 95, 97, 70, 61, 96, 30});
        company = 23;

        System.out.println(order(cityNodes, cityFrom, cityTo, company));
    }

    public static List<Integer> order(int cityNodes, List<Integer> cityFrom, List<Integer> cityTo, int company) {
        List<Integer> result = new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for (int i = 0; i <= cityNodes; i++) {
            adj.add(i, new ArrayList<>(cityNodes));
        }

        int n = cityFrom.size();
        for (int i = 0; i < n; i++) {
            adj.get(cityFrom.get(i)).add(cityTo.get(i));
            adj.get(cityTo.get(i)).add(cityFrom.get(i));
        }

        boolean[] visited = new boolean[cityNodes + 1];

        bfs(adj, visited, result, company);

        return result;
    }

    private static void bfs(ArrayList<ArrayList<Integer>> adj, boolean[] visited, List<Integer> result, int company) {
        Queue<Integer> queue = new LinkedList<>();

        visited[company] = true;

        queue.add(company);

        while (!queue.isEmpty()) {
            int curr = queue.poll();
            if (curr != company)
                result.add(curr);

            ArrayList<Integer> list = adj.get(curr);
            Collections.sort(list);
            Iterator<Integer> itr = list.listIterator();

            while (itr.hasNext()) {
                int currentVertex = itr.next();
                if (!visited[currentVertex]) {
                    visited[currentVertex] = true;
                    queue.add(currentVertex);
                }
            }
        }
    }

    private static void dfs(ArrayList<ArrayList<Integer>> list, boolean[] visited, int sourceIndex, LinkedHashSet<Integer> result) {
        visited[sourceIndex] = true;


        ArrayList<Integer> list1 = list.get(sourceIndex);
        Collections.sort(list1);
        Iterator itr = list1.listIterator();

        while (itr.hasNext()) {
            int currIndex = (int) itr.next();
            if (!visited[currIndex])
                dfs(list, visited, currIndex, result);
        }

        result.add(sourceIndex);

    }
}
